function lmInput(){return{scope:{bindModel:"=ngModel",datatype:"@"},require:"ngModel",transclude:!0,templateUrl:"/app/control/input/input-control.html",link:function(t,e,n,o){"use strict";t.datatype||(t.datatype="text")}}}!function(){"use strict";function t(t){t.activeTab="/",t.$on("$routeChangeStart",function(e,n){n.$$route&&(t.activeTab=n.$$route.originalPath)})}function e(t,e){t.otherwise({redirectTo:"/"}),e.html5Mode(!0)}function n(t,e,n){t.$on("$routeChangeSuccess",function(){n.ga&&n.ga("send","pageview",{page:e.path()})})}function o(t){function e(e){var n,o=$(".menu-indicator"),i=$("li.active-menu").index();n=t.tabs[e.index],i>e.index?(o.removeClass("right"),o.addClass("left"),o.css({left:n.left}),o.css({right:n.right})):(o.removeClass("left"),o.addClass("right"),o.css({right:n.right}),o.css({left:n.left}))}t.$on("$routeChangeSuccess",function(n,o){var i=$("menu ul").width();$("menu ul li").each(function(n,o){var r=$(o).outerWidth(),l=t.tabs[n];if(l.index=n,0===n)l.left=0,l.right=i-r;else{var u=t.tabs[n-1];l.left=i-u.right,l.right=u.right-r}t.activeTab.indexOf(l.id)>-1&&e(l)})}),t.tabs=[new i("/","Все"),new i("/film","Фильмы"),new i("/serial","Сериалы"),new i("/anime","Аниме"),new i("/other","Прочее"),new i("/upload","Загрузить фильм")],t.selectTab=e}function i(t,e,n){this.id=t,this.name=e,this.selected=n}angular.module("App",["ngRoute","ngAnimate","app.auth","ContentModule","ControlsModule","ContentCardModule","ItemModule","UploadModule","ProfileModule","RecentModule"]).config(e).run(t).run(n).controller("NavigationCtrl",o),t.$inject=["$rootScope"],e.$inject=["$routeProvider","$locationProvider"],n.$inject=["$rootScope","$location","$window"],o.$inject=["$scope"],i.prototype={id:"",name:"",selected:!1},angular.module("App").directive("background",function(){return function(t,e,n){var o=n.background;e.css({"background-image":"url("+o+")","background-size":"cover"})}})}(),function(){"use strict";angular.module("app.auth",["ngRoute","ngResource","ngCookies","ControlsModule"])}(),function(){function t(t){"ngInject";t.when("/",{templateUrl:"/app/content/content.html",controller:"AllContentCtrl"}).when("/film",{templateUrl:"/app/content/content.html",controller:"FilmContentCtrl"}).when("/serial",{templateUrl:"/app/content/content.html",controller:"SerialContentCtrl"})}function e(t,e){t.content=e.findContent()}function n(t,e){t.content=e.findContent(null,"Film")}function o(t,e){t.content=e.findContent(null,"Serial")}t.$inject=["$routeProvider"],angular.module("ContentModule",["ContentServices"]).config(t).controller("AllContentCtrl",e).controller("SerialContentCtrl",o).controller("FilmContentCtrl",n),e.$inject=["$scope","ContentService"],n.$inject=["$scope","ContentService"],o.$inject=["$scope","ContentService"]}(),angular.module("UploadModule",["ngResource","ngFileUpload","ngCookies"]),function(){"use strict";function t(t,e,n){function o(e,n){t.login(e,n)}var i=this;i.email="Braidner",i.password="12345",i.auth=o,n.$on("oauth:login",function(n){console.log(t.isAuthenticated),t.isAuthenticated&&e.path("/")})}angular.module("app.auth").controller("LoginController",t),t.$inject=["AuthService","$location","$scope"]}(),function(){"use strict";function t(t){t.when("/login",{templateUrl:"/app/auth/login.html"})}function e(t,e,n){t.$on("$routeChangeStart",function(t,o,i){console.log(n.isAuthenticated+" : "+o.$$route.originalPath),n.isAuthenticated||"/login"==o.$$route.originalPath||(t.preventDefault(),console.log("need auth"),e.path("/login"))})}angular.module("app.auth").run(e).config(t),t.$inject=["$routeProvider"],e.$inject=["$rootScope","$location","AuthService"]}(),function(){function t(t,e,n,o,i){function r(r,u){t.auth(n({scope:"ui",username:r,password:u,grant_type:"password"})).$promise.then(function(t){e.defaults.headers.common.Authorization="Bearer "+t.access_token,o.put("access_token",t.access_token),l.isAuthenticated=!0,i.$broadcast("oauth:login",t),console.log(t)},function(){l.isAuthenticated=!1,i.$emit("oauth:login")})}var l=this;return l.isAuthenticated=!1,l.login=r,l}function e(t){return t("/api/auth/:path/:token",{},{auth:{method:"POST",params:{path:"oauth",token:"token"},isArray:!1,headers:{Authorization:"Basic YnJvd3Nlcjo=","Content-type":"application/x-www-form-urlencoded; charset=utf-8"}}})}angular.module("app.auth").factory("AuthService",t).factory("AuthResource",e),t.$inject=["AuthResource","$http","$httpParamSerializer","$cookies","$rootScope"],e.$inject=["$resource"]}(),function(){"use strict";function t(t){return t("api/content/{id}")}angular.module("ContentModule").factory("ContentResource",t),t.$inject=["$resource"]}(),function(){"use strict";function t(t){function e(t,e){return i.query({name:t,type:e})}function n(t){t.type="film";var e=new i(t);return e.$save(),e}var o=this,i=t("/api/content/resource",{},{});return o.findContent=e,o.createContent=n,o}angular.module("ContentServices",["ngResource"]).factory("ContentService",t),t.$inject=["$resource"]}(),function(){function t(t){"ngInject";t.when("/film/:content_id",{templateUrl:"/app/content-card/content-card.html",controller:"FilmCardCtrl"}).when("/serial/:content_id",{templateUrl:"/app/content-card/content-card.html",controller:"SerialCardCtrl"})}function e(){"ngInject"}function n(){"ngInject"}t.$inject=["$routeProvider"],angular.module("ContentCardModule",[]),angular.module("ContentCardModule").config(t).controller("FilmCardCtrl",e).controller("SerialCardCtrl",n)}(),function(){"use strict";angular.module("ControlsModule",["control.input-control","control.parser","control.input-chunk"])}(),function(){function t(t){"ngInject";function e(e,n,o){n.on("click",function(n){t.path("/"+angular.lowercase(e.item.type)+"/"+e.item.id),e.$apply()})}return{link:e,restrict:"E",replace:!0,scope:{item:"="},templateUrl:"/app/item/item.html"}}angular.module("ItemModule",[]).directive("contentItem",t),t.$inject=["$location"]}(),function(){"use strict";function t(t){"ngInject";t.when("/profile",{templateUrl:"/app/profile/profile.html",controller:"ProfileCtrl"})}function e(t){function e(t){return profile.perms.indexOf(t)>-1}t.profile={login:"Braidner",perms:["user:edit:profile"]},t.hasPermission=e}function n(){}t.$inject=["$routeProvider"],e.$inject=["$rootScope"],angular.module("ProfileModule",[]),angular.module("ProfileModule").config(t),angular.module("ProfileModule").run(e),angular.module("ProfileModule").controller("ProfileCtrl",n)}(),function(){"use strict";function t(t){t.content=[{name:"Zootopia",poster:"http://www.kinopoisk.ru/images/film_big/775276.jpg",id:0,type:"film"},{name:"Batman v Superman: Dawn of Justice",poster:"http://www.kinopoisk.ru/images/film_big/770631.jpg",id:0,type:"film"},{name:"The Justice League Part One",poster:"http://www.kinopoisk.ru/images/film_big/424994.jpg",id:0,type:"film"},{name:"The flash",poster:"http://www.kinopoisk.ru/images/film_big/817506.jpg",id:0,type:"film"},{name:"The Justice League Part One",poster:"http://www.kinopoisk.ru/images/film_big/424994.jpg",id:0,type:"film"},{name:"Frozen",poster:"http://www.kinopoisk.ru/images/film_big/493208.jpg",id:0,type:"film"},{name:"Batman v Superman: Dawn of Justice",poster:"http://www.kinopoisk.ru/images/film_big/770631.jpg",id:0,type:"film"},{name:"Untitled Spider-Man Reboot",poster:"http://www.kinopoisk.ru/images/film_big/690593.jpg",id:0,type:"film"}]}angular.module("RecentModule",[]).controller("RecentCtrl",t),t.$inject=["$scope"],angular.module("RecentModule").directive("owlCarousel",function(){var t=function(t,e,n){var o=function(){e.owlCarousel({loop:!1,nav:!1,responsive:{1200:{items:6},992:{items:4},768:{items:3},479:{items:2}}})};t.$watchCollection(n.owlCarousel,function(){o()})};return{restrict:"A",link:t}})}(),function(){"use strict";function t(t,e,n){function o(){console.log(i.content),i.content.type="film",i.uploadFile.upload=n.upload({url:"/api/content/resource",data:{content:JSON.stringify(r),file:i.uploadFile}}),i.uploadFile.upload.then(function(t){i.uploadFile.result=t.data},function(t){t.status>0&&console.log(t.status+": "+t.data)},function(t){i.uploadFile.progress=Math.min(100,parseInt(100*t.loaded/t.total)),console.log("Progress: "+Math.min(100,parseInt(100*t.loaded/t.total)))})}var i=this;i.uploadFile={},i.content={},i.save=o;var r=t.get();t.set(null),r&&(i.content=r)}angular.module("UploadModule").controller("UploadCtrl",t),t.$inject=["UploadData","ContentService","Upload","$cookies"]}(),function(){"use strict";function t(){function t(t){n=t}function e(){return n}var n={};return{set:t,get:e}}angular.module("UploadModule").factory("UploadData",t)}(),function(){"use strict";function t(t){t.when("/upload",{templateUrl:"/app/upload/upload.html"})}angular.module("UploadModule").config(t),t.$inject=["$routeProvider"]}(),function(){"use strict";function t(t,e){function n(){var n=t.get(),o=new e(n);return o.id}var o=this;return o.createContent=n,o}angular.module("UploadModule").service("UploadService",t),t.$inject=["UploadData","ContentResource"]}(),angular.module("control.input-control",[]).directive("lmInput",lmInput),function(){function t(){return{scope:{bindModel:"=ngModel"},require:"ngModel",transclude:!0,templateUrl:"/app/control/input-chunk/input-chunk.html",link:function(t,e,n,o){"use strict"}}}angular.module("control.input-chunk",[]),angular.module("control.input-chunk").directive("lmInputChunk",t)}(),function(){function t(t,e,n){return{scope:{bindModel:"=ngModel"},require:"ngModel",transclude:!0,templateUrl:"/app/control/url-parser-control/url-parser-control.html",link:function(o,i,r,l){"use strict";i.find(".button").on("click",function(){n.get({id:o.bindModel.match(/\/film\/(\d*)\//)[1]}).$promise.then(function(n){n.url=o.bindModel,e.set(n),t.path("/upload")})})}}}function e(t){return t("/api/content/discovery/:id")}angular.module("control.parser",["ngResource"]),angular.module("ControlsModule").directive("lmUrlParser",t).factory("DiscoveryResource",e),t.$inject=["$location","UploadData","DiscoveryResource"],e.$inject=["$resource"]}();
//# sourceMappingURL=data:application/json;base64,
